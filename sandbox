VisualActor(
  (encoder): ImageEncoderNetwork(
    (activation): ReLU()
    (conv_enc): DoublingConvEncoderNetwork(
      (conv_enc): ConvEncoderNetwork(
        (activation): ReLU()
        (model): Sequential(
          (0): Conv2d(1, 2, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          (1): ReLU()
          (2): Conv2d(2, 4, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          (3): ReLU()
          (4): Conv2d(4, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          (5): ReLU()
          (6): Conv2d(8, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          (7): ReLU()
          (8): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          (9): ReLU()
          (10): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          (11): ReLU()
          (12): Flatten(start_dim=1, end_dim=-1)
          (13): Linear(in_features=64, out_features=64, bias=True)
        )
      )
    )
    (linear): UniformLinearNetwork(
      (activation): ReLU()
      (l_net): LinearNetwork(
        (activation): ReLU()
        (model): Sequential(
          (0): Linear(in_features=64, out_features=64, bias=True)
        )
      )
    )
  )
  (head): StateActor(
    (inner_activation): Tanh()
    (ulinear): UniformLinearNetwork(
      (activation): Tanh()
      (l_net): LinearNetwork(
        (activation): Tanh()
        (model): Sequential(
          (0): Linear(in_features=64, out_features=32, bias=True)
          (1): Tanh()
          (2): Linear(in_features=32, out_features=32, bias=True)
        )
      )
    )
    (linear): Linear(in_features=32, out_features=4, bias=True)
    (out_activation): Softmax(dim=-1)
  )
)

VisualCritic(
  (encoder): ImageEncoderNetwork(
    (activation): ReLU()
    (conv_enc): DoublingConvEncoderNetwork(
      (conv_enc): ConvEncoderNetwork(
        (activation): ReLU()
        (model): Sequential(
          (0): Conv2d(1, 2, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          (1): ReLU()
          (2): Conv2d(2, 4, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          (3): ReLU()
          (4): Conv2d(4, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          (5): ReLU()
          (6): Conv2d(8, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          (7): ReLU()
          (8): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          (9): ReLU()
          (10): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          (11): ReLU()
          (12): Flatten(start_dim=1, end_dim=-1)
          (13): Linear(in_features=64, out_features=64, bias=True)
        )
      )
    )
    (linear): UniformLinearNetwork(
      (activation): ReLU()
      (l_net): LinearNetwork(
        (activation): ReLU()
        (model): Sequential(
          (0): Linear(in_features=64, out_features=64, bias=True)
        )
      )
    )
  )
  (head): StateCritic(
    (activation): ReLU()
    (ulinear): UniformLinearNetwork(
      (activation): ReLU()
      (l_net): LinearNetwork(
        (activation): ReLU()
        (model): Sequential(
          (0): Linear(in_features=64, out_features=32, bias=True)
          (1): ReLU()
          (2): Linear(in_features=32, out_features=32, bias=True)
        )
      )
    )
    (linear): Linear(in_features=32, out_features=1, bias=True)
  )
)